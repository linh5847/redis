- name: Install Linux system packages
  yum:
    name: ["gcc", "libffi-devel", "libcurl-devel", "zlib-devel", "readline-devel", "ncurses-devel", "wget", "telnet", "net-tools"]
    state: "{{ state }}"

- name: Disable Linux firewalld.
  service:
    name: firewalld
    state: stopped
    enabled: no

- name: Set SELinux to disable mode.
  selinux:
    policy: targeted
    state: disabled

- name: Set SELinux to disable mode in the config file.
  lineinfile:
    path: "/etc/selinux/config"
    state: "{{ state }}"
    regexp: '^SELINUX=((.*))?'
    line: 'SELINUX=disabled'

- name: Disable hugepage.
  command: "echo never > /sys/kernel/mm/transparent_hugepage/enabled"
  run_once: true

- name: Deploy redis-sysctl config file to tune Linux kernel parameters.
  copy:
    src: files/redis-sysctl.conf
    dest: /etc/sysctl.d/redis-sysctl.conf
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "{{ fmode }}"

- name: Enable Linux sysctl kernel parameters.
  command: "sysctl --system"
  run_once: true

- name: Change hostname on node1.
  shell: >
    hostnamectl set-hostname "{{ ansible_hostname }}a.{{ ansible_domain }}" > node1.log
  args:
    executable: /bin/bash
    creates: node1.log
  when: inventory_hostname in groups['redis_node1']
    
- name: Change hostname node2.
  shell: >
    hostnamectl set-hostname "{{ ansible_hostname }}b.{{ ansible_domain }}" > node2.log
  args:
    executable: /bin/bash
    creates: node2.log
  when: inventory_hostname in groups['redis_node2']

- name: Change hostname node3.
  shell: >
    hostnamectl set-hostname "{{ ansible_hostname }}c.{{ ansible_domain }}" > node3.log
  args:
    executable: /bin/bash
    creates: node3.log
  when: inventory_hostname in groups['redis_node3']

- name: Get Redis node1 IP address.
  local_action: "copy content='{{ ansible_all_ipv4_addresses[1] }}   {{ ansible_hostname }}.{{ ansible_domain }}' dest=hfile/node1ip"
  delegate_to: localhost
  when: inventory_hostname in groups['redis_node1']

- name: Get Redis node2 IP address.
  local_action: "copy content='{{ ansible_all_ipv4_addresses[1] }}   {{ ansible_hostname }}.{{ ansible_domain }}' dest=hfile/node2ip"
  delegate_to: localhost
  when: inventory_hostname in groups['redis_node2']

- name: Get Redis node3 IP address.
  local_action: "copy content='{{ ansible_all_ipv4_addresses[1] }}   {{ ansible_hostname }}.{{ ansible_domain }}' dest=hfile/node3ip"
  delegate_to: localhost
  when: inventory_hostname in groups['redis_node3']

- name: merge host file.
  assemble:
    src: hfile
    dest: "myhost"
    mode: "{{ fmode }}"
  delegate_to: localhost

- name: Deploy hosts file to the target machine.
  copy:
    src: "myhost"
    dest: /etc/hosts
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "{{ fmode }}"

- name: CleanUp host on local.
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "myhost"
    - hfile/node1ip
    - hfile/node2ip
    - hfile/node3ip
  delegate_to: localhost

- name: Install EPEL Repo.
  yum:
    name: ["epel-release", "yum-utils"]
    state: "{{ state }}"

- name: Install Redis Repo.
  yum:
    name: "http://rpms.remirepo.net/enterprise/remi-release-7.rpm"
    state: "{{ state }}"

- name: Configure and update Repo.
  command: "yum-config-manager --enable remi && yum repolist enabled"
  run_once: true

- name: Install redis package.
  yum:
    name: redis
    state: "{{ state }}"

- name: Create Redis cluster directories.
  file:
    path: "/etc/redis/cluster"
    state: "{{ dstate }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
  register: pdir

- name: Create Redis Cluster Master directory.
  file:
    path: "{{ pdir.path }}/{{ master_port }}"
    state: "{{ dstate }}"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"

- name: Deploy Redis configure file.
  template:
    src: "redis_{{ master_port }}.conf.j2"
    dest: "{{ pdir.path }}/{{ master_port }}/redis_{{ master_port }}.conf"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"
    mode: "{{ fmode }}"

- name: Create Redis claster Master data directory.
  file:
    path: "/var/lib/redis/{{ master_port }}"
    state: "{{ dstate }}"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"

- name: Deploy Redis systemd service configure file.
  template:
    src: "redis_{{ master_port }}.service.j2"
    dest: "/etc/systemd/system/redis_{{ master_port }}.service"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "{{ fmode }}"

- name: Redis service enabled.
  service:
    name: "redis_{{ master_port }}.service"
    enabled: yes

- name: Enable systemd.
  systemd:
    daemon_reload: yes

- name: Startup Redis service daemon.
  service:
    name: "redis_{{ master_port }}.service"
    state: started

- name: Create Redis Cluster Slave directory.
  file:
    path: "{{ pdir.path }}/{{ slave_port }}"
    state: "{{ dstate }}"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"

- name: Deploy Redis configure file.
  template:
    src: "redis_{{ slave_port }}.conf.j2"
    dest: "{{ pdir.path }}/{{ slave_port }}/redis_{{ slave_port }}.conf"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"
    mode: "{{ fmode }}"

- name: Create Redis claster Slave data directory.
  file:
    path: "/var/lib/redis/{{ slave_port }}"
    state: "{{ dstate }}"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"

- name: Deploy Redis systemd service configure file.
  template:
    src: "redis_{{ slave_port }}.service.j2"
    dest: "/etc/systemd/system/redis_{{ slave_port }}.service"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "{{ fmode }}"

- name: Redis service enabled.
  service:
    name: "redis_{{ slave_port }}.service"
    enabled: yes

- name: Enable systemd.
  systemd:
    daemon_reload: yes

- name: Startup Redis service daemon.
  service:
    name: "redis_{{ slave_port }}.service"
    state: started

- name: Get Redis node1 IP address.
  local_action: "copy content='host1ip: \"{{ ansible_all_ipv4_addresses[1] }}\"' dest=file/node1ip"
  delegate_to: localhost
  when: inventory_hostname in groups['redis_node1']

- name: Get Redis node2 IP address.
  local_action: "copy content='host2ip: \"{{ ansible_all_ipv4_addresses[1] }}\"' dest=file/node2ip"
  delegate_to: localhost
  when: inventory_hostname in groups['redis_node2']

- name: Get Redis node3 IP address.
  local_action: "copy content='host3ip: \"{{ ansible_all_ipv4_addresses[1] }}\"' dest=file/node3ip"
  delegate_to: localhost
  when: inventory_hostname in groups['redis_node3']

- name: merge info in a variable file.
  assemble:
    src: file
    dest: "myip"
    mode: "{{ fmode }}"
  delegate_to: localhost

- name: Deploy output ip address of each to variable file.
  copy:
    src: "myip"
    dest: "group_vars/all/all.yml"
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: "0666"
  delegate_to: localhost

- name: cleanUp temp variable.
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "myip"
    - file/node1ip
    - file/node2ip
    - file/node3ip
  delegate_to: localhost

- name: Install expect.
  yum:
    name: [ "expect", "expect-devel"]
    state: "{{ state }}"
  when: inventory_hostname in groups['redis_cluster']

- name: Deploy pexpect 4.5 to the target machine.
  copy:
    src: 'files/python2-pexpect-4.5-1.el7.noarch.rpm'
    dest: '/tmp/python2-pexpect-4.5-1.el7.noarch.rpm'
    mode: '{{ fmode }}'
  when: inventory_hostname in groups['redis_cluster']

- name: Install pexpect 3.3 or later for module.
  yum:
    name: "/tmp/python2-pexpect-4.5-1.el7.noarch.rpm"
    state: "{{ state }}"
  when: inventory_hostname in groups['redis_cluster']

# THIS module requires expect and pexpect 3.3 or later on the target machine to works.
- name: Create redis cluster.
  expect:
    command: redis-cli --cluster create "{{ host1ip }}:{{ master_port }}" "{{ host2ip }}:{{ master_port }}" "{{ host3ip }}:{{ master_port }}" "{{ host1ip }}:{{ slave_port }}" "{{ host2ip }}:{{ slave_port }}" "{{ host3ip }}:{{ slave_port }}" --cluster-replicas 1
    responses:
      "Can I set the above configuration? (type 'yes' to accept)": "yes"
    timeout: 600
  when: inventory_hostname in groups['redis_node1']
