- name: Install Linux system packages
  yum:
    name: ["gcc", "libffi-devel", "libcurl-devel", "zlib-devel", "readline-devel", "ncurses-devel", "wget", "telnet", "net-tools"]
    state: "{{ state }}"

- name: Disable Linux firewalld.
  service:
    name: firewalld
    state: stopped
    enabled: no

- name: Set SELinux to disable mode.
  selinux:
    policy: targeted
    state: disabled

- name: Set SELinux to disable mode in the config file.
  lineinfile:
    path: "/etc/selinux/config"
    state: "{{ state }}"
    regexp: '^SELINUX=((.*))?'
    line: 'SELINUX=disabled'

- name: Disable hugepage.
  command: "echo never > /sys/kernel/mm/transparent_hugepage/enabled"
  run_once: true

- name: Deploy redis-sysctl config file to tune Linux kernel parameters.
  copy:
    src: files/redis-sysctl.conf
    dest: /etc/sysctl.d/redis-sysctl.conf
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "{{ fmode }}"

- name: Enable Linux sysctl kernel parameters.
  command: "sysctl --system"
  run_once: true

- name: Install EPEL Repo.
  yum:
    name: ["epel-release", "yum-utils"]
    state: "{{ state }}"

- name: Install Redis Repo.
  yum:
    name: "http://rpms.remirepo.net/enterprise/remi-release-7.rpm"
    state: "{{ state }}"

- name: Configure and update Repo.
  command: "yum-config-manager --enable remi && yum repolist enabled"
  run_once: true

- name: Install redis package.
  yum:
    name: redis
    state: "{{ state }}"

- name: Create Redis cluster directories.
  file:
    path: "/etc/redis/cluster"
    state: "{{ dstate }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
  register: pdir

- name: Create Redis Cluster Master directory.
  file:
    path: "{{ pdir.path }}/{{ master_port }}"
    state: "{{ dstate }}"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"

- name: Deploy Redis configure file.
  template:
    src: "redis_{{ master_port }}.conf.j2"
    dest: "{{ pdir.path }}/{{ master_port }}/redis_{{ master_port }}.conf"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"
    mode: "{{ fmode }}"

- name: Create Redis claster Master data directory.
  file:
    path: "/var/lib/redis/{{ master_port }}"
    state: "{{ dstate }}"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"

- name: Deploy Redis systemd service configure file.
  template:
    src: "redis_{{ master_port }}.service.j2"
    dest: "/etc/systemd/system/redis_{{ master_port }}.service"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "{{ fmode }}"

- name: Redis service enabled.
  service:
    name: "redis_{{ master_port }}.service"
    enabled: yes

- name: Enable systemd.
  systemd:
    daemon_reload: yes

- name: Startup Redis service daemon.
  service:
    name: "redis_{{ master_port }}.service"
    state: started

- name: Create Redis Cluster Slave directory.
  file:
    path: "{{ pdir.path }}/{{ slave_port }}"
    state: "{{ dstate }}"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"

- name: Deploy Redis configure file.
  template:
    src: "redis_{{ slave_port }}.conf.j2"
    dest: "{{ pdir.path }}/{{ slave_port }}/redis_{{ slave_port }}.conf"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"
    mode: "{{ fmode }}"

- name: Create Redis claster Slave data directory.
  file:
    path: "/var/lib/redis/{{ slave_port }}"
    state: "{{ dstate }}"
    owner: "{{ user_owner }}"
    group: "{{ user_group }}"

- name: Deploy Redis systemd service configure file.
  template:
    src: "redis_{{ slave_port }}.service.j2"
    dest: "/etc/systemd/system/redis_{{ slave_port }}.service"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "{{ fmode }}"

- name: Redis service enabled.
  service:
    name: "redis_{{ slave_port }}.service"
    enabled: yes

- name: Enable systemd.
  systemd:
    daemon_reload: yes

- name: Startup Redis service daemon.
  service:
    name: "redis_{{ slave_port }}.service"
    state: started

- name: Get Redis node1 IP address.
  shell: >
    echo "{{ ansible_all_ipv4_addresses[1] }}"
  register: node1ip
  args:
    executable: /bin/bash
  when: inventory_hostname in groups['redis_node1']

- debug:
    msg: "{{ node1ip.stdout }}"
  when: inventory_hostname in groups['redis_node1']

- name: Get Redis node1 IP address.
  shell: >
    echo "{{ ansible_all_ipv4_addresses[1] }}"
  register: node2ip
  args:
    executable: /bin/bash
  when: inventory_hostname in groups['redis_node2']

- debug:
    msg: "{{ node2ip.stdout }}"

- name: Get Redis node1 IP address.
  shell: >
    echo "{{ ansible_all_ipv4_addresses[1] }}"
  register: node3ip
  args:
    executable: /bin/bash
  when: inventory_hostname in groups['redis_node3']

- debug:
    msg: "{{ node3ip.stdout }}"
  when: inventory_hostname in groups['redis_node3']

- name: Create Redis cluster.
  shell: >
    redis-cli --cluster create "{{ node1ip.stdout }}:{{ master_port }}" "{{ node2ip.stdout }}:{{ master_port }}" "{{ node3ip.stdout }}:{{ master_port }}" "{{ node1ip.stdout }}:{{ slave_port }}" "{{ node2ip.stdout }}:{{ slave_port }}" "{{ node3ip.stdout }}:{{ slave_port }}" --cluster-replicas 1 > redis_cluster.log
  args:
    executable: /bin/bash
    creates: redis_cluster.log